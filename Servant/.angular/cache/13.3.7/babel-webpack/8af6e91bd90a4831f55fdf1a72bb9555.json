{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsageHttpParams extends HttpParams {\n  constructor(noNoader) {\n    super();\n    this.noNoader = noNoader;\n  }\n\n}\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n    }\n\n    dataToSendConvert(data, body, name = '') {\n      for (const key in data) {\n        if (data[key] instanceof Array || data[key] instanceof Object) {\n          this.dataToSendConvert(data[key], body, name.length ? `${name}[${key}]` : `${key}`);\n        } else {\n          body.append(name.length ? `${name}[${key}]` : `${key}`, data[key]);\n        }\n      }\n    }\n\n    dataToSend(data) {\n      const body = new URLSearchParams();\n      this.dataToSendConvert(data, body);\n      return body.toString();\n    }\n\n    get(url, options = {\n      changeApi: null,\n      params: {}\n    }) {\n      return this.httpClient.get(url, {\n        params: options.params\n      });\n    }\n\n    getWithHttpParams(url, params) {\n      return this.httpClient.get(url, {\n        params\n      });\n    }\n\n    getNotLoader(url, options = {\n      changeApi: null\n    }) {\n      return this.httpClient.get(url, {\n        params: new UsageHttpParams(true)\n      });\n    }\n\n    post(url, body, options = {\n      changeApi: null,\n      params: {}\n    }) {\n      // Ustalić przy budowaniu servera jakie dane będę wysyłać i odpowiednio je obrobić przed wysyłką na server \n      return this.httpClient.post(url, this.dataToSend(body), {\n        params: options.params\n      });\n    }\n\n    put(url, body, options = {\n      changeApi: null,\n      params: {}\n    }) {\n      // Ustalić przy budowaniu servera jakie dane będę wysyłać i odpowiednio je obrobić przed wysyłką na server \n      return this.httpClient.put(url, this.dataToSend(body), {\n        params: options.params\n      });\n    }\n\n    delete(url, options = {\n      changeApi: null,\n      params: {}\n    }) {\n      return this, this.httpClient.delete(url, {\n        params: options.params\n      });\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}